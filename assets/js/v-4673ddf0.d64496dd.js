"use strict";(self.webpackChunkgithub_io=self.webpackChunkgithub_io||[]).push([[741],{66:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4673ddf0",path:"/guide/typescript.html",title:"TypeScript",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本类型",slug:"基本类型",children:[]},{level:2,title:"接口",slug:"接口",children:[]},{level:2,title:"数组的类型",slug:"数组的类型",children:[]},{level:2,title:"函数的类型",slug:"函数的类型",children:[]},{level:2,title:"类型断言",slug:"类型断言",children:[]},{level:2,title:"元组",slug:"元组",children:[]},{level:2,title:"枚举",slug:"枚举",children:[]},{level:2,title:"类",slug:"类",children:[]},{level:2,title:"泛型",slug:"泛型",children:[]},{level:2,title:"高级类型",slug:"高级类型",children:[]}],filePathRelative:"guide/typescript.md",git:{updatedTime:1632476976e3}}},7938:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(6252);const t=(0,p._)("h1",{id:"typescript",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#typescript","aria-hidden":"true"},"#"),(0,p.Uk)(" TypeScript")],-1),o=(0,p.Uk)("大部分参考于 "),e={href:"https://ts.xcatliu.com/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("TypeScript 入门教程"),l=(0,p.uE)('<h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 布尔值</span>\n<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 数值</span>\n<span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;11&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 字符串</span>\n<span class="token keyword">let</span> nul<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// null</span>\n<span class="token keyword">const</span> udf<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>\n<span class="token keyword">let</span> unUse<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// void 严格模式下只能用 undefined，非严格模式可以是 undefined | null</span>\n<span class="token keyword">const</span> unionType<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 联合类型</span>\n<span class="token comment">// 类型别名</span>\n<span class="token keyword">type</span> <span class="token class-name">Str</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> str2<span class="token operator">:</span> Str <span class="token operator">=</span> <span class="token string">&#39;11&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 等价于 str2: string</span>\n</code></pre></div><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    gender<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;female&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// 可选属性</span>\n    <span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>  <span class="token comment">// 任意属性</span>\n    <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// 只读属性</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    gender<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="数组的类型" tabindex="-1"><a class="header-anchor" href="#数组的类型" aria-hidden="true">#</a> 数组的类型</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> arr1<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 泛型</span>\n<span class="token keyword">const</span> arr2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 数组接口  一般用于类数组，如 arguments</span>\n<span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    callee<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> args<span class="token operator">:</span> NumberArray <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> args2<span class="token operator">:</span> IArguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span>  <span class="token comment">// TS 定义好的类型，与 NumberArray 接口形状相同</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="函数的类型" tabindex="-1"><a class="header-anchor" href="#函数的类型" aria-hidden="true">#</a> 函数的类型</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">const</span> foo3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token comment">// TS 中的 =&gt; 用来表示函数的定义  (输入) =&gt; 输出</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo4</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 函数接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">IFoo</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token function-variable function">IFoo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token comment">// 函数重载</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 值 as 类型</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log(param.length);  // 报错，只能用 string 和 number 的公共属性</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>param <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正常编译</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Days <span class="token punctuation">{</span> Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 经过编译后 Days 为 {&quot;0&quot;: &quot;Sun&quot;, &quot;1&quot;: &quot;Mon&quot;, &quot;2&quot;: &quot;Tue&quot;, ..., &quot;Sun&quot;: 0, &quot;Mon&quot;: 1, ...}</span>\n</code></pre></div><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类" aria-hidden="true">#</a> 类</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IOption</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    gender<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 公有  所有属性和方法默认公有</span>\n    <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// 私有  只能在该类内部访问</span>\n    <span class="token keyword">protected</span> gender<span class="token operator">:</span> <span class="token string">&#39;male&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 受保护  与 private 相似，但可以被子类访问</span>\n    <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// 只读  只能出现在属性声明或构造函数中</span>\n\n    <span class="token function">constructor</span><span class="token punctuation">(</span>option<span class="token operator">:</span> IOption<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender <span class="token punctuation">}</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>  <span class="token comment">// 抽象类，不允许实例化</span>\n    <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 抽象方法，由子类实现</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token keyword">extends</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>\n    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;Hi&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// 需要类实现的接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>\n    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">LightableAlarm</span> <span class="token keyword">extends</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  <span class="token comment">// 接口继承</span>\n    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Door</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">SecurityDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">,</span> Light <span class="token punctuation">{</span>  <span class="token comment">// 类可实现多个接口</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;SecurityDoor alert&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">CarDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">LightableAlarm</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CarDoor alert&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 创建类的时候，会自动创建类的类型</span>\n<span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 类 Point 会创建以下接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token comment">// 不会包含静态属性、方法和构造函数</span>\n    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 泛型 - 在定义函数、接口或类的时候，不预先指定具体的类型，使用时再指定类型</span>\n<span class="token keyword">function</span> <span class="token function">createArray</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 可以预见，createArray 函数返回数组的类型与参数 value 相同，可以用泛型改写为：</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 泛型约束</span>\n<span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>\n    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 约束泛型T必须符合 Lengthwise 的形状 (即包含 number 类型的 length 属性)</span>\n<span class="token comment">// 泛型之间也可以互相约束 &lt;T extends U, U&gt;  这样保证了 T 的属性集包含 U 的所有属性</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengwise<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>param<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> param<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="高级类型" tabindex="-1"><a class="header-anchor" href="#高级类型" aria-hidden="true">#</a> 高级类型</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 交叉类型，类型必须符合多个类型的形状</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token constant">B</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> objC<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>\n<span class="token keyword">const</span> objC<span class="token operator">:</span> <span class="token constant">C</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// error</span>\n\n<span class="token comment">// 联合类型，类型需要符合某个类型的形状</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ok</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ok</span>\n\n<span class="token comment">// never 类型，用来表示不会返回的函数的返回类型</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// do something</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// typeof 取得类型</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// typeof T 为 { a: number }</span>\n\n<span class="token comment">// 索引类型查询操作符 keyof 取得类型的索引</span>\n<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">I</span></span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// error</span>\n\n<span class="token comment">// Record 快速创建类型</span>\n<span class="token comment">// 类型 R1 等价于 { [key: string]: any }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R1</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token comment">// 类型 R2 等价于 { a: number; b: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R2</span></span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Partial 将所有属性修改为可选</span>\n<span class="token comment">// 类型 P 等价于: { a?: number; b?: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span><span class="token constant">I</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Readonly 将所有属性修改为可选</span>\n<span class="token comment">// 类型 R 等价于: { readonly a: number; readonly b: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span><span class="token constant">I</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Pick 选取多组属性生成类型</span>\n<span class="token comment">// 类型 R 等价于: { a: number; b: number; }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Exclude&lt;T, U&gt; 从 T 中剔除可以赋值给 U 的类型</span>\n<span class="token comment">// 类型 E 等价于 &#39;b&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Extract&lt;T, U&gt; 提取 T 中可以赋值给 U 的类型</span>\n<span class="token comment">// 类型 E 等价于 &#39;a&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">E</span></span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// NonNullable&lt;T&gt; 从 T 中去除 null 和 undefined</span>\n<span class="token comment">// 类型 N 等价于 number | string</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">N</span></span> <span class="token operator">=</span> NonNullable<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ReturnType&lt;T&gt; 获取函数返回值的类型</span>\n<span class="token comment">// 类型 P 等价于 number</span>\n<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">R</span></span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> f<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// InstanceType&lt;T&gt; 获取构造函数类型的实例类型</span>\n<span class="token comment">// 类型 I 等价于类型 C</span>\n<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">I</span></span> <span class="token operator">=</span> InstanceType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> <span class="token constant">C</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Omit&lt;T, U&gt; 去掉 T 中包含 U 的类型</span>\n<span class="token comment">// 类型 O 等价于 { b: string; }</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">O</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span>\n</code></pre></div>',20),k={},u=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("blockquote",null,[(0,p._)("p",null,[o,(0,p._)("a",e,[c,(0,p.Wm)(a)])])]),l],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);