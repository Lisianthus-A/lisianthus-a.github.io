import{c as n}from"./app.dd20dfb6.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><h2 id="\u4E8B\u4EF6\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#\u4E8B\u4EF6\u5FAA\u73AF" aria-hidden="true">#</a> \u4E8B\u4EF6\u5FAA\u73AF</h2><p>js \u5F15\u64CE\u5728\u6267\u884C\u4EFB\u52A1\u65F6\uFF0C\u4E0D\u4F1A\u7B49\u5F85\u5F02\u6B65\u4EFB\u52A1\u7684\u7ED3\u679C\u8FD4\u56DE\uFF0C\u800C\u662F\u5C06\u5176\u6302\u8D77\uFF0C\u7B49\u7ED3\u679C\u8FD4\u56DE\u4E86\u518D\u5C06\u5F02\u6B65\u4EFB\u52A1\u7684\u56DE\u8C03\u52A0\u5165\u4E8B\u4EF6\u961F\u5217\u3002</p><p>\u4E8B\u4EF6\u961F\u5217\u5206\u4E3A\u5FAE\u4EFB\u52A1\u961F\u5217\u548C\u5B8F\u4EFB\u52A1\u961F\u5217\uFF0C\u5F15\u64CE\u4F1A\u4F18\u5148\u6267\u884C\u5FAE\u4EFB\u52A1\uFF0C\u518D\u6267\u884C\u5B8F\u4EFB\u52A1\u3002<br> \u5B8F\u4EFB\u52A1\u5305\u62EC\uFF1A<code>setTimeout</code>\u3001<code>setInterval</code> \u7B49<br> \u5FAE\u4EFB\u52A1\u5305\u62EC\uFF1A<code>Promise</code>\u3001<code>IntersectionObserver</code>\u3001<code>queueMicrotask</code> \u7B49</p><p>\u5F53 js \u5F15\u64CE\u5B8C\u6210\u5F53\u524D\u7684\u540C\u6B65\u4EFB\u52A1\u540E\uFF0C\u4F1A\u6E05\u7A7A <span style="color:#ee8888;">\u6240\u6709</span> \u5FAE\u4EFB\u52A1\uFF0C\u7136\u540E\u6267\u884C <span style="color:#ee8888;">\u4E00\u6761</span> \u5B8F\u4EFB\u52A1\uFF0C\u518D\u6E05\u7A7A\u5FAE\u4EFB\u52A1\uFF0C\u4E0D\u65AD\u5FAA\u73AF\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>\u9009\u4E2D\u533A\u57DF\u67E5\u770B\u6253\u5370\u5FAA\u5E8F\uFF1A<span style="color:#000;border-radius:4px;background-color:#000;">1 4 5 2 3 6</span></p><h2 id="\u539F\u578B\u94FE" tabindex="-1"><a class="header-anchor" href="#\u539F\u578B\u94FE" aria-hidden="true">#</a> \u539F\u578B\u94FE</h2><p>\u6240\u6709\u9664 <code>null</code> \u5916\u7684\u5BF9\u8C61\u90FD\u6709\u4E00\u4E2A\u5C5E\u6027 <code>__proto__</code>\uFF0C\u6307\u5411\u8BE5\u5BF9\u8C61\u7684\u539F\u578B\u3002<br> \u6240\u6709\u9664<span style="color:#ee8888;">\u7BAD\u5934\u51FD\u6570</span>\u5916\u7684\u51FD\u6570\u90FD\u6709\u4E00\u4E2A\u5C5E\u6027 <code>prototype</code>\uFF0C\u6307\u5411\u8BE5\u51FD\u6570\u7684\u539F\u578B\u3002 <br> \u5BF9\u8C61\u7684 <code>__proto__</code> \u7B49\u4EF7\u4E8E\u8BE5\u5BF9\u8C61\u7684\u6784\u9020\u51FD\u6570\u7684 <code>prototype</code>\u3002 <br></p><p>\u8BBF\u95EE\u5BF9\u8C61\u7684\u4E00\u4E2A\u5C5E\u6027\u65F6\uFF1A</p><ol><li>\u5BF9\u8C61\u4E0A\u5B58\u5728\u8BE5\u5C5E\u6027\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5BF9\u5E94\u5C5E\u6027\u7684\u503C</li><li>\u5BF9\u8C61\u4E0A\u4E0D\u5B58\u5728\u8BE5\u5C5E\u6027\uFF0C\u5219\u8BBF\u95EE\u5BF9\u8C61\u7684\u539F\u578B\u3002\u5982\u679C\u539F\u578B\u4E0A\u5B58\u5728\u8BE5\u5C5E\u6027\uFF0C\u8FD4\u56DE\u539F\u578B\u4E2D\u5BF9\u5E94\u5C5E\u6027\u7684\u503C\uFF0C\u5426\u5219\u7EE7\u7EED\u8BBF\u95EE\u539F\u578B\u7684\u539F\u578B\uFF0C\u76F4\u5230\u9047\u5230 <code>null</code>\uFF0C\u8FD4\u56DE <code>undefined</code></li></ol><p>\u51E0\u4E2A\u4F8B\u5B50\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>prototype <span class="token operator">===</span> f<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>

<span class="token keyword">const</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// undefined</span>

<span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> f<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
f<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>
</code></pre></div><h2 id="\u6B63\u5219" tabindex="-1"><a class="header-anchor" href="#\u6B63\u5219" aria-hidden="true">#</a> \u6B63\u5219</h2><h3 id="\u6B63\u5219\u7684\u4E00\u4E2A\u5751" tabindex="-1"><a class="header-anchor" href="#\u6B63\u5219\u7684\u4E00\u4E2A\u5751" aria-hidden="true">#</a> \u6B63\u5219\u7684\u4E00\u4E2A\u5751</h3><p>\u4E0A\u4EE3\u7801\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true false true false</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>test</code> \u8FD4\u56DE\u503C\u4E0D\u540C\u662F\u56E0\u4E3A\u5355\u4E2A\u5B9E\u4F8B + \u5168\u5C40\u5339\u914D\u3002</p><p><code>regex</code> \u5339\u914D\u8FC7\u4E00\u6B21\u540E\uFF0C\u4F1A\u8BB0\u5F55\u7D22\u5F15\u503C\u5230 <code>lastIndex</code>\uFF0C\u518D\u6B21\u5339\u914D\u4F1A\u4ECE <code>lastIndex</code> \u5F00\u59CB\u3002</p><p>\u8981\u4ECE\u5934\u5339\u914D\u7684\u8BDD\uFF0C\u53EF\u4EE5\u8BBE\u7F6E <code>lastIndex = 0</code>\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true true true true</span>
    regex<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u7F16\u7A0B\u9898" tabindex="-1"><a class="header-anchor" href="#\u7F16\u7A0B\u9898" aria-hidden="true">#</a> \u7F16\u7A0B\u9898</h2><h3 id="\u514B\u9686" tabindex="-1"><a class="header-anchor" href="#\u514B\u9686" aria-hidden="true">#</a> \u514B\u9686</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u6D45\u514B\u9686</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token parameter">target</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token operator">...</span>target <span class="token punctuation">}</span> <span class="token operator">:</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6DF1\u514B\u9686</span>
<span class="token keyword">const</span> <span class="token function-variable function">deepClone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// \u514B\u9686\u5BF9\u8C61</span>
    <span class="token keyword">const</span> <span class="token function-variable function">cloneObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        cloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> clonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            clonedObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getClonedValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> clonedObj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u514B\u9686\u6570\u7EC4</span>
    <span class="token keyword">const</span> <span class="token function-variable function">cloneArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token function">getClonedValue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u514B\u9686 Set</span>
    <span class="token keyword">const</span> <span class="token function-variable function">cloneSet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">getClonedValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> s<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u514B\u9686 Map</span>
    <span class="token keyword">const</span> <span class="token function-variable function">cloneMap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">map</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> newKey <span class="token operator">=</span> <span class="token function">getClonedValue</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">getClonedValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newKey<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u514B\u9686\u6B63\u5219</span>
    <span class="token keyword">const</span> <span class="token function-variable function">cloneRegExp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">regex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> regexStr <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> flags <span class="token operator">=</span> regexStr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>regexStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u83B7\u53D6\u514B\u9686\u540E\u7684\u503C</span>
    <span class="token keyword">const</span> <span class="token function-variable function">getClonedValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Number]&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Boolean]&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object String]&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Null]&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Undefined]&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Function]&#39;</span><span class="token operator">:</span>  <span class="token comment">// \u8FD9 6 \u79CD\u7C7B\u578B\u76F4\u63A5\u8FD4\u56DE</span>
                <span class="token keyword">return</span> value<span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token operator">:</span>  <span class="token comment">// \u6570\u7EC4</span>
                <span class="token keyword">return</span> <span class="token function">cloneArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token operator">:</span>  <span class="token comment">// \u5BF9\u8C61</span>
                <span class="token keyword">return</span> cloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">cloneObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Set]&#39;</span><span class="token operator">:</span>  <span class="token comment">// Set</span>
                <span class="token keyword">return</span> <span class="token function">cloneSet</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object Map]&#39;</span><span class="token operator">:</span>  <span class="token comment">// Map</span>
                <span class="token keyword">return</span> <span class="token function">cloneMap</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;[object RegExp]&#39;</span><span class="token operator">:</span>  <span class="token comment">// \u6B63\u5219\u8868\u8FBE\u5F0F</span>
                <span class="token keyword">return</span> <span class="token function">cloneRegExp</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> cloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u514B\u9686\u8FC7\u7684\u5BF9\u8C61\uFF0C\u5904\u7406\u5D4C\u5957\u8C03\u7528</span>
    <span class="token keyword">return</span> <span class="token function">getClonedValue</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u51FD\u6570\u9632\u6296" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u9632\u6296" aria-hidden="true">#</a> \u51FD\u6570\u9632\u6296</h3><p>\u591A\u6B21\u8C03\u7528\u51FD\u6570\uFF0C\u5728\u6700\u540E\u4E00\u6B21\u8C03\u7528\u7684 n \u79D2\u540E\u518D\u6267\u884C\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u51FD\u6570\u8282\u6D41" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u8282\u6D41" aria-hidden="true">#</a> \u51FD\u6570\u8282\u6D41</h3><p>\u5728 n \u79D2\u5185\uFF0C\u4E0D\u7BA1\u591A\u5C11\u6B21\u8C03\u7528\uFF0C\u53EA\u6267\u884C\u4E00\u6B21\u51FD\u6570\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> canRun <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>canRun<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            canRun <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                canRun <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5B9E\u73B0-add-1-2-3-4" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0-add-1-2-3-4" aria-hidden="true">#</a> \u5B9E\u73B0 add(1, 2)(3)(4)</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// add(1, 2)(3)() --&gt; 6</span>
<span class="token comment">// add(1)(2)(3, 4, 5)() --&gt; 15</span>
<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sum <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>nextArgs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> nextArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">add</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token operator">...</span>nextArgs<span class="token punctuation">)</span> <span class="token operator">:</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,32);function t(o,e){return p}var l=s(a,[["render",t]]);export{l as default};
